"use client";

import React, { useState, useRef, useCallback } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import {
  faTimes,
  faFileExcel,
  faUpload,
  faDownload,
  faMagic,
  faPlus,
  faTrash,
  faUsers,
} from "@fortawesome/free-solid-svg-icons";
import { useLotteryStore } from "@/utils/lotteryStore";
import { generateParticipants, getModuleMaxParticipants } from "@/utils/participantUtils";
import { useTranslations } from "next-intl";

interface DataManagerProps {
  isOpen: boolean;
  onClose: () => void;
  module: "ball" | "grid" | "wheel";
}

export default function DataManager({
  isOpen,
  onClose,
  module,
}: DataManagerProps) {
  const t = useTranslations("common");
  const fileInputRef = useRef<HTMLInputElement>(null);
  const [newParticipant, setNewParticipant] = useState("");
  const [isProcessing, setIsProcessing] = useState(false);

  const { participants, setParticipants, resetLottery } = useLotteryStore();
  const maxParticipants = getModuleMaxParticipants(module);
  
  // 获取参与者名字列表
  const participantNames = participants.map(p => p.name);

  const handleFileUpload = useCallback(
    async (event: React.ChangeEvent<HTMLInputElement>) => {
      const file = event.target.files?.[0];
      if (!file) return;

      setIsProcessing(true);
      try {
        if (file.type === "text/plain") {
          const text = await file.text();
          const names = text
            .split(/[\n,]/)
            .map((name) => name.trim())
            .filter((name) => name.length > 0);

          if (names.length > maxParticipants) {
            alert(t("participantLimitExceeded", { max: maxParticipants }));
            return;
          }

          setParticipants(names);
        } else if (
          file.type ===
            "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" ||
          file.type === "application/vnd.ms-excel"
        ) {
          const { read, utils } = await import("xlsx");
          const arrayBuffer = await file.arrayBuffer();
          const workbook = read(arrayBuffer);
          const worksheet = workbook.Sheets[workbook.SheetNames[0]];
          const data = utils.sheet_to_json(worksheet, {
            header: 1,
          }) as string[][];

          const names = data
            .flat()
            .map((cell) => String(cell).trim())
            .filter((name) => name && name !== "Name" && name !== "名称");

          if (names.length > maxParticipants) {
            alert(t("participantLimitExceeded", { max: maxParticipants }));
            return;
          }

          setParticipants(names);
        }
      } catch (error) {
        console.error("File processing error:", error);
        alert(t("fileProcessingError"));
      } finally {
        setIsProcessing(false);
        if (fileInputRef.current) {
          fileInputRef.current.value = "";
        }
      }
    },
    [maxParticipants, setParticipants, t]
  );

  const handleAddParticipant = () => {
    if (newParticipant.trim() && participants.length < maxParticipants) {
      const updatedNames = [...participantNames, newParticipant.trim()];
      setParticipants(updatedNames);
      setNewParticipant("");
    }
  };

  const handleDeleteParticipant = (index: number) => {
    const updatedNames = participantNames.filter((_, i) => i !== index);
    setParticipants(updatedNames);
  };

  const handleGenerateRandom = () => {
    const names = generateParticipants({
      maxCount: maxParticipants,
      module,
      generateType: "english",
    });
    setParticipants(names);

    // 触发自动生成事件
    if (typeof window !== "undefined") {
      const event = new CustomEvent("autoGeneratedParticipants", {
        detail: { count: names.length },
      });
      window.dispatchEvent(event);
    }
  };

  const handleExportTemplate = () => {
    const { utils, writeFile } = require("xlsx");
    const ws = utils.aoa_to_sheet([
      ["Name"],
      ["John Doe"],
      ["Jane Smith"],
      ["Mike Johnson"],
      ["Sarah Wilson"],
      ["David Brown"],
    ]);
    const wb = utils.book_new();
    utils.book_append_sheet(wb, ws, "Participants");
    writeFile(wb, `${module}_participants_template.xlsx`);
  };

  const handleClearAll = () => {
    if (confirm(t("confirmClearAll"))) {
      setParticipants([]);
      resetLottery();
    }
  };

  if (!isOpen) return null;

  return (
    <AnimatePresence>
      <motion.div
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        exit={{ opacity: 0 }}
        className="fixed inset-0 bg-black/60 backdrop-blur-sm flex items-center justify-center z-50 p-4"
      >
        <motion.div
          initial={{ opacity: 0, scale: 0.9, y: 20 }}
          animate={{ opacity: 1, scale: 1, y: 0 }}
          exit={{ opacity: 0, scale: 0.9, y: 20 }}
          className="bg-white/10 backdrop-blur-md rounded-2xl shadow-2xl w-full max-w-4xl max-h-[90vh] overflow-hidden border border-white/20"
          onClick={(e) => e.stopPropagation()}
        >
          {/* Header */}
          <div className="flex items-center justify-between p-6 border-b border-white/20">
            <h2 className="text-2xl font-bold text-white flex items-center space-x-3">
              <FontAwesomeIcon icon={faUsers} className="text-blue-400" />
              <span>{t("manageParticipants")}</span>
            </h2>
            <button
              onClick={onClose}
              className="p-2 hover:bg-white/10 rounded-lg transition-colors text-white"
            >
              <FontAwesomeIcon icon={faTimes} />
            </button>
          </div>

          {/* Content */}
          <div className="p-6 overflow-y-auto max-h-[calc(90vh-140px)]">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              {/* Left Panel - Import/Export */}
              <div className="space-y-6">
                <div className="bg-white/10 backdrop-blur-sm p-4 rounded-xl border border-white/20">
                  <h3 className="text-lg font-semibold text-white mb-4 flex items-center space-x-2">
                    <FontAwesomeIcon icon={faFileExcel} className="text-green-400" />
                    <span>{t("importExport")}</span>
                  </h3>
                  <div className="space-y-3">
                    <button
                      onClick={() => fileInputRef.current?.click()}
                      className="w-full bg-blue-500/20 hover:bg-blue-500/30 border border-blue-400/30 text-white px-4 py-3 rounded-lg font-medium transition-colors flex items-center justify-center space-x-2 backdrop-blur-sm"
                      disabled={isProcessing}
                    >
                      <FontAwesomeIcon icon={faUpload} />
                      <span>
                        {isProcessing ? t("processing") : t("importFile")}
                      </span>
                    </button>
                    <button
                      onClick={handleExportTemplate}
                      className="w-full bg-green-500/20 hover:bg-green-500/30 border border-green-400/30 text-white px-4 py-3 rounded-lg font-medium transition-colors flex items-center justify-center space-x-2 backdrop-blur-sm"
                    >
                      <FontAwesomeIcon icon={faDownload} />
                      <span>{t("downloadTemplate")}</span>
                    </button>
                    <button
                      onClick={handleGenerateRandom}
                      className="w-full bg-purple-500/20 hover:bg-purple-500/30 border border-purple-400/30 text-white px-4 py-3 rounded-lg font-medium transition-colors flex items-center justify-center space-x-2 backdrop-blur-sm"
                    >
                      <FontAwesomeIcon icon={faMagic} />
                      <span>{t("generateRandom")}</span>
                    </button>
                  </div>
                </div>

                {/* Manual Add */}
                <div className="bg-white/10 backdrop-blur-sm p-4 rounded-xl border border-white/20">
                  <h3 className="text-lg font-semibold text-white mb-4 flex items-center space-x-2">
                    <FontAwesomeIcon icon={faPlus} className="text-yellow-400" />
                    <span>{t("manualAdd")}</span>
                  </h3>
                  <div className="flex space-x-2">
                    <input
                      type="text"
                      value={newParticipant}
                      onChange={(e) => setNewParticipant(e.target.value)}
                      placeholder={t("enterParticipantName")}
                      className="flex-1 px-3 py-2 bg-white/10 border border-white/20 rounded-lg text-white placeholder-white/50 focus:outline-none focus:ring-2 focus:ring-blue-400 focus:border-transparent backdrop-blur-sm"
                      onKeyPress={(e) =>
                        e.key === "Enter" && handleAddParticipant()
                      }
                    />
                    <button
                      onClick={handleAddParticipant}
                      className="bg-yellow-500/20 hover:bg-yellow-500/30 border border-yellow-400/30 text-white px-4 py-2 rounded-lg transition-colors backdrop-blur-sm"
                      disabled={participants.length >= maxParticipants}
                    >
                      <FontAwesomeIcon icon={faPlus} />
                    </button>
                  </div>
                  <p className="text-sm text-white/70 mt-2">
                    {t("participantCount", {
                      current: participants.length,
                      max: maxParticipants,
                    })}
                  </p>
                </div>
              </div>

              {/* Right Panel - Participant List */}
              <div className="bg-white/10 backdrop-blur-sm p-4 rounded-xl border border-white/20">
                <div className="flex items-center justify-between mb-4">
                  <h3 className="text-lg font-semibold text-white flex items-center space-x-2">
                    <FontAwesomeIcon icon={faUsers} className="text-orange-400" />
                    <span>{t("participantList")}</span>
                  </h3>
                  <button
                    onClick={handleClearAll}
                    className="bg-red-500/20 hover:bg-red-500/30 border border-red-400/30 text-white px-3 py-1 rounded-lg text-sm transition-colors flex items-center space-x-1 backdrop-blur-sm"
                    disabled={participants.length === 0}
                  >
                    <FontAwesomeIcon icon={faTrash} />
                    <span>{t("clearAll")}</span>
                  </button>
                </div>
                <div className="h-80 overflow-y-auto space-y-2 pr-2">
                  {participants.length === 0 ? (
                    <div className="text-center py-8">
                      <div className="text-4xl mb-2 opacity-50">👥</div>
                      <p className="text-white/50">{t("noParticipants")}</p>
                    </div>
                  ) : (
                    participants.map((participant, index) => (
                      <div
                        key={`${participant.id}-${index}`}
                        className="flex items-center justify-between bg-white/5 p-3 rounded-lg border border-white/10 hover:bg-white/10 transition-colors"
                      >
                        <span className="text-white flex items-center space-x-3">
                          <span className="w-6 h-6 bg-blue-500/30 rounded-full flex items-center justify-center text-xs font-bold">
                            {index + 1}
                          </span>
                          <span>{participant.name}</span>
                        </span>
                        <button
                          onClick={() => handleDeleteParticipant(index)}
                          className="text-red-400 hover:text-red-300 p-1 rounded hover:bg-red-500/20 transition-colors"
                        >
                          <FontAwesomeIcon icon={faTrash} />
                        </button>
                      </div>
                    ))
                  )}
                </div>
              </div>
            </div>
          </div>

          {/* Footer */}
          <div className="p-6 border-t border-white/20">
            <div className="flex justify-between items-center">
              <div className="text-white/70 text-sm">
                {t("moduleLimit", { module, max: maxParticipants })}
              </div>
              <button
                onClick={onClose}
                className="bg-blue-500 hover:bg-blue-600 text-white px-6 py-2 rounded-lg transition-colors"
              >
                {t("close")}
              </button>
            </div>
          </div>
        </motion.div>

        {/* Hidden file input */}
        <input
          ref={fileInputRef}
          type="file"
          accept=".txt,.xlsx,.xls"
          onChange={handleFileUpload}
          className="hidden"
        />
      </motion.div>
    </AnimatePresence>
  );
}
