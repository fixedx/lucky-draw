"use client";

import React, { useState, useEffect, useCallback, useRef } from "react";
import { useTranslations } from "next-intl";
import { useParams } from "next/navigation";
import Link from "next/link";
import { useLotteryStore } from "@/utils/lotteryStore";
import { useLotteryUtils } from "@/utils/lotteryUtils";
import { LotteryState } from "@/types/types";
import SpinWheel, { type SpinWheelRef } from "@/components/wheel/SpinWheel";
import ControlPanel from "@/components/common/ControlPanel";
import RightToolbar from "@/components/common/RightToolbar";
import DataManager from "@/components/common/DataManager";
import WinnerAnimation from "@/components/common/WinnerAnimation";
import SettingsModal from "@/components/common/SettingsModal";
import WinnerResultsModal from "@/components/common/WinnerResultsModal";
import HelpModal from "@/components/common/HelpModal";
import LanguageSwitcher from "@/components/LanguageSwitcher";
import DynamicSEO from "@/components/SEO/DynamicSEO";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faKeyboard, faHome } from "@fortawesome/free-solid-svg-icons";

// Âø´Êç∑ÈîÆÊòæÁ§∫ÁªÑ‰ª∂
function ShortcutDisplay() {
  const t = useTranslations("Wheel");
  return (
    <div className="fixed bottom-6 left-6 z-50 bg-red-600/40 text-yellow-100 p-3 rounded-lg shadow-xl backdrop-blur-sm text-xs border border-yellow-300/30">
      <div className="flex items-center space-x-2 mb-1">
        <FontAwesomeIcon icon={faKeyboard} className="text-yellow-300" />
        <span className="font-semibold text-yellow-200">
          {t("shortcutsTitle")}
        </span>
      </div>
      <ul className="space-y-0.5">
        <li>
          <kbd className="px-1.5 py-0.5 bg-yellow-400/30 rounded text-xs text-yellow-100 font-mono">
            Space
          </kbd>
          : {t("spaceKeyDesc")}
        </li>
        <li>
          <kbd className="px-1.5 py-0.5 bg-yellow-400/30 rounded text-xs text-yellow-100 font-mono">
            Ctrl/Cmd+R
          </kbd>
          : {t("rKeyDesc")}
        </li>
        <li>
          <kbd className="px-1.5 py-0.5 bg-yellow-400/30 rounded text-xs text-yellow-100 font-mono">
            Esc
          </kbd>
          : {t("escKeyDesc")}
        </li>
      </ul>
    </div>
  );
}

export default function WheelLotteryPage() {
  const t = useTranslations("Wheel");
  const params = useParams();
  const locale = params.locale as string;
  const [isDataManagerOpen, setIsDataManagerOpen] = useState(false);
  const [isFullscreen, setIsFullscreen] = useState(false);
  const [isClient, setIsClient] = useState(false);
  const [isSettingsOpen, setIsSettingsOpen] = useState(false);
  const [isResultsOpen, setIsResultsOpen] = useState(false);
  const [isHelpOpen, setIsHelpOpen] = useState(false);

  // SpinWheelÁªÑ‰ª∂ÁöÑref
  const spinWheelRef = useRef<SpinWheelRef>(null);

  // ÊäΩÂ•ñÂ∑•ÂÖ∑
  const lotteryUtils = useLotteryUtils();

  const {
    participants,
    winners,
    loadFromStorage,
    resetLottery,
    state,
    settings,
    loadSettings,
    loadHistoryWinners,
  } = useLotteryStore();

  // Á°Æ‰øùÂÆ¢Êà∑Á´ØÊâßË°åÂπ∂ÂÆåÊï¥ÊÅ¢Â§çÊï∞ÊçÆ
  useEffect(() => {
    setIsClient(true);
    // ÊåâÈ°∫Â∫èÂä†ËΩΩÊâÄÊúâÊï∞ÊçÆ‰ª•Á°Æ‰øùÂÆåÊï¥ÊÅ¢Â§ç
    const initializeData = async () => {
      // 1. ÂÖàÂä†ËΩΩËÆæÁΩÆ
      loadSettings();
      // 2. ÁÑ∂ÂêéÂä†ËΩΩÂèÇ‰∏éËÄÖÂíå‰∏≠Â•ñËÄÖÊï∞ÊçÆ
      loadFromStorage();
      // 3. ÊúÄÂêéÂä†ËΩΩÂéÜÂè≤‰∏≠Â•ñËÆ∞ÂΩï
      loadHistoryWinners();
    };

    // ÁõëÂê¨Ëá™Âä®ÁîüÊàêÂèÇ‰∏éËÄÖ‰∫ã‰ª∂
    const handleAutoGenerated = (event: CustomEvent) => {
      const { count } = event.detail;
      // ÊòæÁ§∫ÈÄöÁü•Ê∂àÊÅØ
      if (typeof window !== "undefined") {
        setTimeout(() => {
          alert(t("autoGeneratedParticipants", { count }));
        }, 500); // Âª∂Ëøü500ms‰ª•Á°Æ‰øùÈ°µÈù¢Âä†ËΩΩÂÆåÊàê
      }
    };

    window.addEventListener(
      "autoGeneratedParticipants",
      handleAutoGenerated as EventListener
    );

    initializeData();

    return () => {
      window.removeEventListener(
        "autoGeneratedParticipants",
        handleAutoGenerated as EventListener
      );
    };
  }, []); // ÁßªÈô§‰æùËµñÈ°πÔºåÂè™Âú®ÁªÑ‰ª∂ÊåÇËΩΩÊó∂ÊâßË°å‰∏ÄÊ¨°

  // Â§ÑÁêÜÂÖ®Â±èÂàáÊç¢
  const toggleFullscreen = () => {
    if (!document.fullscreenElement) {
      document.documentElement
        .requestFullscreen()
        .then(() => {
          setIsFullscreen(true);
        })
        .catch((err) => {
          console.error("Error attempting to enable fullscreen:", err);
        });
    } else {
      document
        .exitFullscreen()
        .then(() => {
          setIsFullscreen(false);
        })
        .catch((err) => {
          console.error("Error attempting to exit fullscreen:", err);
        });
    }
  };

  // ÁõëÂê¨ÂÖ®Â±èÁä∂ÊÄÅÂèòÂåñ
  useEffect(() => {
    const handleFullscreenChange = () => {
      setIsFullscreen(!!document.fullscreenElement);
    };

    document.addEventListener("fullscreenchange", handleFullscreenChange);
    return () => {
      document.removeEventListener("fullscreenchange", handleFullscreenChange);
    };
  }, []);

  // Â§ÑÁêÜÊï∞ÊçÆÂØºÂÖ•
  const handleImport = () => {
    setIsDataManagerOpen(true);
  };

  const handleReset = useCallback(() => {
    if (winners.length > 0 || participants.length > 0) {
      const confirmed = confirm(t("confirmResetMessage"));
      if (confirmed) {
        resetLottery();
      }
    }
  }, [winners, participants, resetLottery, t]);

  // ËΩ¨ÁõòÊ®°Âùó‰∏ìÁî®ÁöÑÂºÄÂßãÊäΩÂ•ñÈÄªËæë
  const handleStartDrawing = () => {
    // Ê£ÄÊü•ÊòØÂê¶ÂèØ‰ª•ÂºÄÂßãÊäΩÂ•ñ
    if (!lotteryUtils.canStartDrawing()) {
      return;
    }

    // Ë∞ÉÁî®ÈÄöÁî®ÁöÑÂºÄÂßãÊäΩÂ•ñÈÄªËæë
    lotteryUtils.startDrawing(() => {
      // Ë∞ÉÁî®ËΩ¨ÁõòÁöÑspinÊñπÊ≥ï
      if (spinWheelRef.current) {
        spinWheelRef.current.spin();
      }
    });
  };

  // ËΩ¨ÁõòÊ®°Âùó‰∏ìÁî®ÁöÑÂÅúÊ≠¢ÊäΩÂ•ñÈÄªËæë
  const handleStopDrawing = () => {
    // Ë∞ÉÁî®ÈÄöÁî®ÁöÑÂÅúÊ≠¢ÊäΩÂ•ñÈÄªËæë
    lotteryUtils.stopDrawing();
  };

  // ÈîÆÁõòÂø´Êç∑ÈîÆÂ§ÑÁêÜ
  useEffect(() => {
    const handleGlobalKeyPress = (event: KeyboardEvent) => {
      if ((event.ctrlKey || event.metaKey) && event.code === "KeyR") {
        event.preventDefault();
        // handleReset();
      }
      // EscÈîÆÈÄÄÂá∫ÂÖ®Â±è
      if (event.code === "Escape" && isFullscreen) {
        event.preventDefault();
        toggleFullscreen();
      }
    };
    window.addEventListener("keydown", handleGlobalKeyPress);
    return () => window.removeEventListener("keydown", handleGlobalKeyPress);
  }, [handleReset, isFullscreen]);

  if (!isClient) {
    return (
      <div className="w-full h-screen flex items-center justify-center bg-gradient-to-br from-red-400 via-orange-500 to-yellow-500 text-white">
        <div className="text-center">
          <div className="animate-spin w-12 h-12 border-4 border-white border-t-transparent rounded-full mx-auto mb-4"></div>
          <div className="text-lg">{t("initializingScene")}</div>
        </div>
      </div>
    );
  }

  return (
    <div
      className={`
      relative w-full h-screen overflow-hidden bg-gradient-to-br from-red-400 via-orange-500 to-yellow-500 wheel-scrollbar-theme
      ${isFullscreen ? "cursor-none" : ""}
    `}
    >
      {/* Dynamic SEO Component */}
      <DynamicSEO
        participantCount={participants.length}
        winnerCount={winners.length}
        isDrawing={state !== LotteryState.IDLE}
        prizeTypes={[settings.prizeType]}
      />

      {/* Page title and description - shown only in non-fullscreen mode */}
      {!isFullscreen && (
        <div className="absolute top-4 left-4 z-30 text-yellow-200">
          <h1 className="text-2xl font-bold mb-2 text-yellow-100 drop-shadow-md">
            {settings.pageTitle || t("title")}
          </h1>
          <p className="text-sm text-yellow-200 max-w-md drop-shadow-sm">
            {t("description")}
          </p>
        </div>
      )}

      {/* Top-right status info and language switcher - shown only in non-fullscreen mode */}
      {!isFullscreen && (
        <div className="absolute top-4 right-4 z-30 text-yellow-100 text-right space-y-3">
          {/* Home button and Language switcher */}
          <div className="flex items-center justify-end space-x-3">
            <Link href={`/${locale}`}>
              <button className="flex items-center space-x-2 bg-white/10 hover:bg-white/20 backdrop-blur-sm border border-white/20 rounded-lg px-3 py-2 text-white transition-all duration-200 shadow-lg text-sm">
                <FontAwesomeIcon icon={faHome} className="text-yellow-300" />
                <span className="hidden sm:inline">{t("returnToHome")}</span>
              </button>
            </Link>
            <LanguageSwitcher />
          </div>

          {/* Status information */}
          <div className="bg-red-600/30 backdrop-blur-sm rounded-lg p-3 text-sm border border-yellow-300/20">
            <div className="space-y-1">
              <div className="text-yellow-200 font-medium">
                {t("totalParticipants")}: {participants.length}
              </div>
              <div className="text-green-300 font-medium">
                {t("totalWinners")}: {winners.length}
              </div>
              <div className="text-orange-300 font-medium">
                {t("remainingPool")}: {participants.length - winners.length}
              </div>
              <div className="text-red-300 text-xs">
                {t("maxParticipants")}: 50
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Â§ßËΩ¨ÁõòÂå∫Âüü */}
      <div className="absolute inset-0 flex items-center justify-center">
        <SpinWheel
          ref={spinWheelRef}
          onWinnerSelected={(winnerName) => {
            console.log("üèÜ ËΩ¨ÁõòËé∑Â•ñËÄÖ:", winnerName);
          }}
          onStartSpin={() => {
            console.log("üé° ËΩ¨ÁõòÂºÄÂßãËΩ¨Âä®");
          }}
          onStopSpin={() => {
            console.log("üõë ËΩ¨ÁõòÂÅúÊ≠¢ËΩ¨Âä®");
          }}
        />
      </div>

      {/* ÈÄöÁî®ÊéßÂà∂Èù¢Êùø */}
      <ControlPanel
        module="wheel"
        onStartDrawing={handleStartDrawing}
        onStopDrawing={handleStopDrawing}
      />

      <RightToolbar
        onImport={handleImport}
        onToggleFullscreen={toggleFullscreen}
        isFullscreen={isFullscreen}
        onReset={handleReset}
        onHelp={() => setIsHelpOpen(true)}
        onSettings={() => setIsSettingsOpen(true)}
        onShowResults={() => setIsResultsOpen(true)}
      />

      <ShortcutDisplay />

      {/* Data manager */}
      <DataManager
        isOpen={isDataManagerOpen}
        onClose={() => setIsDataManagerOpen(false)}
        module="wheel"
      />

      {/* Settings modal */}
      <SettingsModal
        module="wheel"
        isOpen={isSettingsOpen}
        onClose={() => setIsSettingsOpen(false)}
      />

      {/* Winner results modal */}
      <WinnerResultsModal
        isOpen={isResultsOpen}
        onClose={() => setIsResultsOpen(false)}
      />

      {/* Help modal */}
      <HelpModal
        isOpen={isHelpOpen}
        onClose={() => setIsHelpOpen(false)}
        module="wheel"
      />

      {/* Winner animation */}
      <WinnerAnimation />

      {/* Welcome/loading prompt */}
      {participants.length === 0 && state === LotteryState.IDLE && (
        <div className="absolute inset-0 flex items-center justify-center bg-orange-900/70 backdrop-blur-sm z-10">
          <div className="bg-gradient-to-br from-orange-500/20 to-yellow-500/20 backdrop-blur-md rounded-2xl p-8 text-white text-center border border-yellow-400/30 shadow-2xl">
            <div className="text-4xl mb-4">üé°</div>
            <h2 className="text-xl font-semibold mb-4 text-yellow-100 drop-shadow-lg">
              {settings.pageTitle || t("title")}
            </h2>
            <p className="text-yellow-200/90 mb-6">{t("welcomeMessage")}</p>
            <button
              onClick={handleImport}
              className="bg-gradient-to-r from-orange-500 to-yellow-500 hover:from-orange-600 hover:to-yellow-600 text-white px-8 py-3 rounded-xl font-semibold transition-all duration-200 shadow-lg hover:shadow-xl transform hover:scale-105"
            >
              {t("manageParticipants")}
            </button>
          </div>
        </div>
      )}
    </div>
  );
}
